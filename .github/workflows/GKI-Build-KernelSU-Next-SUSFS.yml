name: OnePlus_13T_Kernel_Full_Build
on:
  workflow_dispatch:
    inputs:
      DEVICE_MODEL:
        description: "设备型号 (必须与manifest匹配)"
        required: true
        default: 'oneplus_13t'
      HARDWARE_CODE:
        description: "硬件代号 (sun/star)"
        required: true
        default: 'sun'
      BUILD_PROFILE:
        description: "编译配置 (perf/debug)"
        required: true
        default: 'perf'

jobs:
  full_build:
    runs-on: ubuntu-22.04
    env:
      KERNEL_ROOT: ${{ github.workspace }}/kernel_platform
      BUILD_OUTPUT: ${{ github.workspace }}/out

    steps:
    # ==================== 环境准备阶段 ====================
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git-core gnupg flex bison build-essential zip \
          curl zlib1g-dev libc6-dev-i386 libxml2-utils \
          xsltproc unzip python3-pip ccache bc libssl-dev \
          make gcc clang llvm lz4 liblz4-dev

    - name: 配置Python环境
      run: |
        python3 -m pip install --upgrade pip
        pip install pycryptodome requests

    # ==================== 源码获取阶段 ====================
    - name: 初始化repo工具
      run: |
        mkdir -p ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc

    - name: 同步仓库源码
      run: |
        mkdir kernel_build && cd kernel_build
        repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
          -b onep \
          -m ${{ inputs.DEVICE_MODEL }}.xml \
          --depth=1 \
          --no-repo-verify
        repo sync \
          -c \
          -j$(nproc --all) \
          --no-tags \
          --no-clone-bundle \
          --optimized-fetch

    # ==================== 源码补丁阶段 ====================
    - name: 应用官方硬件补丁
      run: |
        cd $KERNEL_ROOT/oplus/build/patches
        find . -name "*.patch" -exec git apply {} \;

    - name: 部署KernelSU
      run: |
        cd $KERNEL_ROOT
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
        sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=10606/" KernelSU/kernel/Makefile

    - name: 集成SUSFS文件系统
      run: |
        git clone https://gitlab.com/simonpunk/susfs4ksu.git $KERNEL_ROOT/susfs
        cp -rv $KERNEL_ROOT/susfs/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch $KERNEL_ROOT/common/
        cp -rv $KERNEL_ROOT/susfs/kernel_patches/fs/* $KERNEL_ROOT/common/fs/
        cp -rv $KERNEL_ROOT/susfs/kernel_patches/include/linux/* $KERNEL_ROOT/common/include/linux/

    - name: 应用lz4k压缩优化
      run: |
        cd $KERNEL_ROOT/common
        curl -L https://github.com/ExmikoN/SukiSU_patch/raw/main/other/lz4k_patch/6.6/lz4kd.patch | patch -p1 -F 3

    # ==================== 内核配置阶段 ====================
    - name: 修改defconfig配置
      run: |
        echo "CONFIG_KSU=y" >> $KERNEL_ROOT/common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> $KERNEL_ROOT/common/arch/arm64/configs/gki_defconfig
        sed -i '/check_defconfig/d' $KERNEL_ROOT/common/build.config.gki

    - name: 定制内核版本信息
      run: |
        sed -i 's|res="\$res\$(cat "\$file")"|res="-android15-8-@"|g' $KERNEL_ROOT/common/scripts/setlocalversion

    # ==================== 编译构建阶段 ====================
    - name: 执行官方编译命令
      run: |
        cd $KERNEL_ROOT/oplus/build
        chmod +x oplus_build_kernel.sh
        ./oplus_build_kernel.sh ${{ inputs.HARDWARE_CODE }} ${{ inputs.BUILD_PROFILE }}
        mkdir -p $BUILD_OUTPUT
        cp ../out/android*/Image $BUILD_OUTPUT/

    # ==================== 镜像处理阶段 ====================
    - name: 生成KPM镜像
      run: |
        cd $BUILD_OUTPUT
        curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
        chmod +x patch_linux
        ./patch_linux
        mv oImage Image_kpm

    - name: 准备AnyKernel3模板
      run: |
        cd $BUILD_OUTPUT
        git clone https://${{ secrets.AK3_ACCESS_TOKEN }}@github.com/MAXCUK/AnyKernel3-ace5Pro.git AnyKernel3
        rm -rf AnyKernel3/.git
        cp Image* AnyKernel3/
        echo "Device: ${{ inputs.DEVICE_MODEL }}" > AnyKernel3/device.info
        echo "BuildTime: $(date '+%Y%m%d-%H%M%S')" >> AnyKernel3/version

    # ==================== 产物归档阶段 ====================
    - name: 生成压缩包
      run: |
        cd $BUILD_OUTPUT/AnyKernel3
        zip -r9 ../OnePlus13T_Kernel_${{ inputs.HARDWARE_CODE }}_${{ inputs.BUILD_PROFILE }}.zip *

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: OnePlus13T_${{ inputs.HARDWARE_CODE }}_${{ inputs.BUILD_PROFILE }}
        path: |
          $BUILD_OUTPUT/Image*
          $BUILD_OUTPUT/*.zip
